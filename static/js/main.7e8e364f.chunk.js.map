{"version":3,"sources":["components/Navbar.jsx","pages/Home.jsx","components/TvCard.jsx","pages/Discover.jsx","pages/Detail.jsx","components/App.jsx","serviceWorker.js","redux/actionTypes.js","redux/reducer.js","redux/store.js","index.js"],"names":["Navbar","className","to","placeholder","Home","useState","onAirShows","setOnAirShows","slideShowIndex","setSlideShowIndex","useEffect","fetch","then","result","json","data","results","selectedImg","onClick","src","backdrop_path","alt","name","length","withRouter","tvData","lastPopularShowRef","history","ref","id","push","poster_path","overviewLength","overview","split","overviewString","join","slice","overviewConvert","match","showList","setshowList","page","setPage","loading","setLoading","hasMore","setHasMore","searchQuery","setSearchQuery","genreId","params","prevshowList","total_pages","observer","useRef","lastshowListRef","useCallback","showref","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","handFilterClick","query","map","show","index","key","detailData","setDetailData","style","backgroundImage","last_air_date","genres","genre","handleGenreClick","App","basename","path","exact","render","Boolean","window","location","hostname","ActionTypes","INITIAL_STATE","reducer","state","action","type","email","payload","store","createStore","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e8e364f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <Link to=\"/home\" className=\"navbar-link\">\n        Home\n      </Link>\n      <Link to=\"/discover\" className=\"navbar-link\">\n        Discover\n      </Link>\n      <input placeholder=\"search...\" className=\"navbar-input\"></input>\n    </nav>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  //state\n  const [onAirShows, setOnAirShows] = useState([]);\n  const [slideShowIndex, setSlideShowIndex] = useState(0);\n\n  useEffect(() => {\n    fetch(\n      \"https://api.themoviedb.org/3/tv/on_the_air?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=1\"\n    )\n      .then(result => result.json())\n      .then(data => setOnAirShows(data.results));\n  }, []);\n\n  let selectedImg = onAirShows[slideShowIndex] || {};\n\n  const handleSlideNext = () => {\n    if (slideShowIndex < onAirShows.length - 1) {\n      setSlideShowIndex(slideShowIndex + 1);\n    }\n  };\n\n  const handleSlidePrev = () => {\n    if (slideShowIndex > 0) {\n      setSlideShowIndex(slideShowIndex - 1);\n    }\n  };\n  return (\n    <div className=\"home\">\n      <div className=\"home-carousel\">\n        {selectedImg && (\n          <>\n            <button className=\"home-btn-prev\" onClick={handleSlidePrev}>\n              &#10094;\n            </button>\n            <img\n              src={`https://image.tmdb.org/t/p/w1280${selectedImg.backdrop_path}`}\n              alt={selectedImg.name}\n              className=\"home-image\"\n            ></img>\n            <button className=\"home-btn-next\" onClick={handleSlideNext}>\n              &#10095;\n            </button>\n          </>\n        )}\n      </div>\n      <div className=\"home-title\">{selectedImg.name}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction TvCard({ tvData, lastPopularShowRef, history }) {\n  const overviewConvert = () => {\n    let overviewLength = tvData.overview.split(\" \").length;\n    let overviewString = tvData.overview.split(\" \");\n    return overviewLength < 50\n      ? overviewString.join(\" \")\n      : overviewString.slice(0, 50).join(\" \") + \"  ...\";\n  };\n\n  const handleTvDetailClick = id => {\n    history.push(`/detail/${id}`);\n  };\n\n  return (\n    <div\n      className=\"tv-card\"\n      ref={lastPopularShowRef}\n      onClick={() => handleTvDetailClick(tvData.id)}\n    >\n      {tvData && (\n        <>\n          <div className=\"tv-card-poster\">\n            <img\n              src={`https://image.tmdb.org/t/p/w500${tvData.poster_path}`}\n              alt={tvData.name}\n              className=\"tv-card-image\"\n            ></img>\n          </div>\n          <div className=\"tv-card-detail\">\n            <h1>{tvData.name}</h1>\n            <h5>{overviewConvert()}</h5>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default withRouter(TvCard);\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport TvCard from \"../components/TvCard\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction Discover({ match, history }) {\n  //state\n  const [showList, setshowList] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(true);\n  const [searchQuery, setSearchQuery] = useState(\"top_rated\");\n\n  useEffect(() => {\n    setLoading(true);\n    const genreId = match.params.id;\n    const fetchUrl = () => {\n      if (genreId) {\n        return `https://api.themoviedb.org/3/discover/tv?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&sort_by=popularity.desc&page=1&with_genres=${genreId}&include_null_first_air_dates=false`;\n      } else {\n        return `https://api.themoviedb.org/3/tv/${searchQuery}?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=${page}`;\n      }\n    };\n    fetch(fetchUrl())\n      .then(result => result.json())\n      .then(data => {\n        setshowList(prevshowList => {\n          return [...prevshowList, ...data.results];\n        });\n        setHasMore(page < data.total_pages);\n        setLoading(false);\n      });\n  }, [page, searchQuery]);\n\n  const observer = useRef();\n  const lastshowListRef = useCallback(\n    showref => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting) {\n          setPage(page => page + 1);\n        }\n      });\n      if (showref) observer.current.observe(showref);\n    },\n    [loading, hasMore]\n  );\n\n  const handFilterClick = query => {\n    if (query !== searchQuery) {\n      setshowList([]);\n      setSearchQuery(query);\n    }\n    history.push(\"/discover\");\n  };\n\n  return (\n    <div>\n      <div className=\"fiter-section\">\n        <h1 onClick={() => handFilterClick(\"top_rated\")}>Top Rated</h1>\n        <h1 onClick={() => handFilterClick(\"popular\")}>Most Popular</h1>\n      </div>\n      <div className=\"card-list\">\n        {showList.map((show, index) => {\n          if (showList.length === index + 1) {\n            return (\n              <TvCard\n                lastshowListRef={lastshowListRef}\n                key={show.id + index}\n                tvData={show}\n              ></TvCard>\n            );\n          } else {\n            return <TvCard key={show.id + index} tvData={show}></TvCard>;\n          }\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(Discover);\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction Detail({ match, history }) {\n  const id = match.params.id;\n\n  //state\n  const [detailData, setDetailData] = useState({});\n\n  useEffect(() => {\n    fetch(\n      `https://api.themoviedb.org/3/tv/${id}?api_key=4e6dceee069232bb2d064403249143c6&language=en-US`\n    )\n      .then(result => result.json())\n      .then(data => setDetailData({ ...data }));\n  }, [id]);\n\n  const handleGenreClick = id => {\n    history.push(`/discover/${id}`);\n  };\n\n  return (\n    <div className=\"detail-section\">\n      {detailData && (\n        <>\n          <div\n            className=\"detail-section-bg\"\n            style={{\n              backgroundImage: `url(https://image.tmdb.org/t/p/w1280${detailData.backdrop_path})`\n            }}\n          >\n            <div className=\"detail-section-wrapper\">\n              <div className=\"detail-section-information\">\n                <img\n                  alt={detailData.name}\n                  src={`https://image.tmdb.org/t/p/w500${detailData.poster_path}`}\n                ></img>\n                <div className=\"detail-section-description\">\n                  <h1>{detailData.name}</h1>\n                  <div>\n                    <h5>{detailData.last_air_date}</h5>\n                    <span>\n                      {detailData.genres &&\n                        detailData.genres.map(genre => {\n                          return (\n                            <span\n                              key={genre.id}\n                              onClick={() => handleGenreClick(genre.id)}\n                              className=\"detail-section-genres\"\n                            >\n                              {genre.name}\n                            </span>\n                          );\n                        })}\n                    </span>\n                    <h5>{detailData.overview}</h5>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default withRouter(Detail);\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Home from \"../pages/Home\";\n// import Popular from \"../pages/Popular\";\nimport Discover from \"../pages/Discover\";\nimport Detail from \"../pages/Detail\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact render={() => <Home />} />\n          <Route path=\"/home\" exact render={() => <Home />} />\n          <Route path=\"/discover\" exact render={() => <Discover />} />\n          <Route path=\"/discover/:id\" exact render={() => <Discover />} />\n          <Route path=\"/detail/:id\" exact render={() => <Detail />} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionTypes = {\n  SET_EMAIL: \"SET_EMAIL\"\n};\n","import { ActionTypes } from \"./actionTypes\";\n\nconst INITIAL_STATE = {};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_EMAIL:\n      return {\n        ...state,\n        email: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}