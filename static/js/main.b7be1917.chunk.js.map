{"version":3,"sources":["components/Navbar.jsx","pages/Home.jsx","pages/Login.jsx","components/TvCard.jsx","pages/Discover.jsx","pages/Detail.jsx","components/App.jsx","serviceWorker.js","redux/actionTypes.js","redux/reducer.js","redux/store.js","index.js"],"names":["Navbar","className","to","placeholder","Home","useState","onAirShows","setOnAirShows","slideShowIndex","setSlideShowIndex","useEffect","fetch","then","result","json","data","results","selectedImg","onClick","src","backdrop_path","alt","name","length","Login","match","history","withRouter","tvData","overview","split","slice","join","push","id","poster_path","showList","setshowList","page","setPage","searchQuery","setSearchQuery","params","genreId","setGenreId","console","log","url","prevShowList","handleScroll","window","innerHeight","scrollY","document","body","offsetHeight","addEventListener","removeEventListener","handFilterClick","query","map","show","key","detailData","setDetailData","style","backgroundImage","last_air_date","genres","genre","App","basename","path","exact","render","Boolean","location","hostname","ActionTypes","INITIAL_STATE","reducer","state","action","type","email","payload","store","createStore","composeWithDevTools","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7be1917.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <Link to=\"/home\" className=\"navbar-link\">\n        Home\n      </Link>\n      <Link to=\"/discover\" className=\"navbar-link\">\n        Discover\n      </Link>\n      <Link to=\"/login\" className=\"navbar-link\">\n        Login\n      </Link>\n      <input placeholder=\"search...\" className=\"navbar-input\"></input>\n    </nav>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  //state\n  const [onAirShows, setOnAirShows] = useState([]);\n  const [slideShowIndex, setSlideShowIndex] = useState(0);\n\n  useEffect(() => {\n    fetch(\n      \"https://api.themoviedb.org/3/tv/on_the_air?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=1\"\n    )\n      .then(result => result.json())\n      .then(data => setOnAirShows(data.results));\n  }, []);\n\n  let selectedImg = onAirShows[slideShowIndex] || {};\n\n  const handleSlideNext = () => {\n    if (slideShowIndex < onAirShows.length - 1) {\n      setSlideShowIndex(slideShowIndex + 1);\n    }\n  };\n\n  const handleSlidePrev = () => {\n    if (slideShowIndex > 0) {\n      setSlideShowIndex(slideShowIndex - 1);\n    }\n  };\n  return (\n    <div className=\"home\">\n      <div className=\"home-carousel\">\n        {selectedImg && (\n          <>\n            <button className=\"home-btn-prev\" onClick={handleSlidePrev}>\n              &#10094;\n            </button>\n            <img\n              src={`https://image.tmdb.org/t/p/w1280${selectedImg.backdrop_path}`}\n              alt={selectedImg.name}\n              className=\"home-image\"\n            ></img>\n            <button className=\"home-btn-next\" onClick={handleSlideNext}>\n              &#10095;\n            </button>\n          </>\n        )}\n      </div>\n      <div className=\"home-title\">{selectedImg.name}</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nfunction Login({ match, history }) {\n  return <p>Login</p>;\n}\n\nexport default Login;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction TvCard({ tvData, history }) {\n  const overview =\n    tvData.overview.split(\" \").length < 50\n      ? tvData.overview\n      : tvData.overview\n          .split(\" \")\n          .slice(0, 50)\n          .join(\" \") + \"  ...\";\n\n  return (\n    <div\n      className=\"tv-card\"\n      onClick={() => history.push(`/detail/${tvData.id}`)}\n    >\n      {tvData && (\n        <>\n          <div className=\"tv-card-poster\">\n            <img\n              src={`https://image.tmdb.org/t/p/w500${tvData.poster_path}`}\n              alt={tvData.name}\n              className=\"tv-card-image\"\n            />\n          </div>\n          <div className=\"tv-card-detail\">\n            <h1>{tvData.name}</h1>\n            <h5>{overview}</h5>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default withRouter(TvCard);\n","import React, { useState, useEffect } from \"react\";\nimport TvCard from \"../components/TvCard\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction Discover({ match, history }) {\n  //state\n  const [showList, setshowList] = useState([]);\n  const [page, setPage] = useState(1);\n  const [searchQuery, setSearchQuery] = useState(\"top_rated\");\n  const [genreId, setGenreId] = useState(match.params.genreId);\n\n  useEffect(() => {\n    console.log(genreId);\n    const url = genreId\n      ? `https://api.themoviedb.org/3/discover/tv?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&sort_by=popularity.desc&page=${page}&with_genres=${genreId}&include_null_first_air_dates=false`\n      : `https://api.themoviedb.org/3/tv/${searchQuery}?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=${page}`;\n\n    fetch(url)\n      .then(result => result.json())\n      .then(data => {\n        setshowList(prevShowList => {\n          return [...prevShowList, ...data.results];\n        });\n      });\n  }, [page, searchQuery, genreId]);\n\n  const handleScroll = () => {\n    if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {\n      setPage(page => page + 1);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, []);\n\n  const handFilterClick = query => {\n    if (query !== searchQuery) {\n      setGenreId(null);\n      setshowList([]);\n      setPage(1);\n      setSearchQuery(query);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"fiter-section\">\n        <h1 onClick={() => handFilterClick(\"top_rated\")}>Top Rated</h1>\n        <h1 onClick={() => handFilterClick(\"popular\")}>Most Popular</h1>\n      </div>\n      <div className=\"card-list\">\n        {showList.map(show => {\n          return <TvCard key={show.id} tvData={show}></TvCard>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(Discover);\n","import React, { useState, useEffect } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction Detail({ match, history }) {\n  const id = match.params.id;\n\n  //state\n  const [detailData, setDetailData] = useState({});\n\n  useEffect(() => {\n    fetch(\n      `https://api.themoviedb.org/3/tv/${id}?api_key=4e6dceee069232bb2d064403249143c6&language=en-US`\n    )\n      .then(result => result.json())\n      .then(data => setDetailData(data));\n  }, [id]);\n\n  return (\n    <div className=\"detail-section\">\n      {detailData.name && (\n        <>\n          <div\n            className=\"detail-section-bg\"\n            style={{\n              backgroundImage: `url(https://image.tmdb.org/t/p/w1280${detailData.backdrop_path})`\n            }}\n          >\n            <div className=\"detail-section-wrapper\">\n              <div className=\"detail-section-information\">\n                <img\n                  alt={detailData.name}\n                  src={`https://image.tmdb.org/t/p/w500${detailData.poster_path}`}\n                />\n                <div className=\"detail-section-description\">\n                  <h1>{detailData.name}</h1>\n                  <div>\n                    <h5>{detailData.last_air_date}</h5>\n                    <span>\n                      {detailData.genres.map(genre => (\n                        <span\n                          key={genre.id}\n                          onClick={() => history.push(`/discover/${genre.id}`)}\n                          className=\"detail-section-genres\"\n                        >\n                          {genre.name}\n                        </span>\n                      ))}\n                    </span>\n                    <h5>{detailData.overview}</h5>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default withRouter(Detail);\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Home from \"../pages/Home\";\nimport Login from \"../pages/Login\";\nimport Discover from \"../pages/Discover\";\nimport Detail from \"../pages/Detail\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact render={() => <Home />} />\n          <Route path=\"/home\" exact render={() => <Home />} />\n          <Route path=\"/login\" exact render={() => <Login />} />\n          <Route path=\"/discover\" exact render={() => <Discover />} />\n          <Route path=\"/discover/:genreId\" exact render={() => <Discover />} />\n          <Route path=\"/detail/:id\" exact render={() => <Detail />} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionTypes = {\n  SET_EMAIL: \"SET_EMAIL\"\n};\n","import { ActionTypes } from \"./actionTypes\";\n\nconst INITIAL_STATE = {};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_EMAIL:\n      return {\n        ...state,\n        email: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}