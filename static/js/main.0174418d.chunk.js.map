{"version":3,"sources":["components/Navbar.jsx","pages/Home.jsx","pages/TopRated.jsx","components/TvCard.jsx","pages/Popular.jsx","pages/Discover.jsx","components/App.jsx","serviceWorker.js","redux/actionTypes.js","redux/reducer.js","redux/store.js","index.js"],"names":["Navbar","className","to","placeholder","Home","useState","onAirShows","setOnAirShows","slideShowIndex","setSlideShowIndex","useEffect","fetch","then","result","json","data","results","selectedImg","onClick","src","backdrop_path","alt","name","length","TopRated","TvCard","tvData","lastPopularShowRef","ref","poster_path","overviewLength","overview","split","overviewString","join","slice","overviewConvert","Popular","popularShow","setpopularShow","page","setPage","loading","setLoading","hasMore","setHasMore","prevPopularShow","total_pages","observer","useRef","useCallback","showref","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","map","show","index","key","id","Discover","App","basename","path","exact","render","Boolean","window","location","hostname","match","ActionTypes","INITIAL_STATE","reducer","state","action","type","email","payload","store","createStore","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0174418d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Navbar() {\n  return (\n    <nav className=\"navbar\">\n      <Link to=\"/home\" className=\"navbar-link\">\n        Home\n      </Link>\n      <Link to=\"/discover\" className=\"navbar-link\">\n        Discover\n      </Link>\n      <Link to=\"/popular\" className=\"navbar-link\">\n        Popular\n      </Link>\n      <Link to=\"/top-rated\" className=\"navbar-link\">\n        Top Rated\n      </Link>\n      <input placeholder=\"search...\" className=\"navbar-input\"></input>\n    </nav>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Home() {\n  //state\n  const [onAirShows, setOnAirShows] = useState([]);\n  const [slideShowIndex, setSlideShowIndex] = useState(0);\n\n  useEffect(() => {\n    fetch(\n      \"https://api.themoviedb.org/3/tv/on_the_air?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=1\"\n    )\n      .then(result => result.json())\n      .then(data => setOnAirShows(data.results));\n  }, []);\n\n  let selectedImg = onAirShows[slideShowIndex] || {};\n\n  const handleSlideNext = () => {\n    if (slideShowIndex < onAirShows.length - 1) {\n      setSlideShowIndex(slideShowIndex + 1);\n    }\n  };\n\n  const handleSlidePrev = () => {\n    if (slideShowIndex > 0) {\n      setSlideShowIndex(slideShowIndex - 1);\n    }\n  };\n  return (\n    <div className=\"home\">\n      <div className=\"home-carousel\">\n        <button className=\"home-btn-prev\" onClick={handleSlidePrev}>\n          &#10094;\n        </button>\n        <img\n          src={`https://image.tmdb.org/t/p/w1280${selectedImg.backdrop_path}`}\n          alt={selectedImg.name}\n          className=\"home-image\"\n        ></img>\n        <button className=\"home-btn-next\" onClick={handleSlideNext}>\n          &#10095;\n        </button>\n      </div>\n      <div className=\"home-title\">{selectedImg.name}</div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function TopRated() {\n  return <div>TopRated</div>;\n}\n","import React from \"react\";\n\nexport default function TvCard({ tvData, lastPopularShowRef }) {\n  const overviewConvert = () => {\n    let overviewLength = tvData.overview.split(\" \").length;\n    let overviewString = tvData.overview.split(\" \");\n    return overviewLength < 50\n      ? overviewString.join(\" \")\n      : overviewString.slice(0, 50).join(\" \") + \"...\";\n  };\n\n  return (\n    <div className=\"tv-card\" ref={lastPopularShowRef}>\n      <div className=\"tv-card-poster\">\n        <img\n          src={`https://image.tmdb.org/t/p/w500${tvData.poster_path}`}\n          alt={tvData.name}\n          className=\"tv-card-image\"\n        ></img>\n      </div>\n      <div className=\"tv-card-detail\">\n        <h1>{tvData.name}</h1>\n        <h5>{overviewConvert()}</h5>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport TvCard from \"../components/TvCard\";\n\nexport default function Popular() {\n  //state\n  const [popularShow, setpopularShow] = useState([]);\n  const [page, setPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [hasMore, setHasMore] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    fetch(\n      `https://api.themoviedb.org/3/tv/popular?api_key=4e6dceee069232bb2d064403249143c6&language=en-US&page=${page}`\n    )\n      .then(result => result.json())\n      .then(data => {\n        setpopularShow(prevPopularShow => {\n          return [...prevPopularShow, ...data.results];\n        });\n        setHasMore(page < data.total_pages);\n        setLoading(false);\n      });\n  }, [page]);\n\n  const observer = useRef();\n  const lastPopularShowRef = useCallback(\n    showref => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(entries => {\n        if (entries[0].isIntersecting) {\n          setPage(page => page + 1);\n        }\n      });\n      if (showref) observer.current.observe(showref);\n    },\n    [loading, hasMore]\n  );\n  return (\n    <div className=\"card-list\">\n      {popularShow.map((show, index) => {\n        if (popularShow.length === index + 1) {\n          return (\n            <TvCard\n              lastPopularShowRef={lastPopularShowRef}\n              key={show.id}\n              tvData={show}\n            ></TvCard>\n          );\n        } else {\n          return <TvCard key={show.id} tvData={show}></TvCard>;\n        }\n      })}\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Discover() {\n  return <div>Discover</div>;\n}\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport Navbar from \"./Navbar\";\nimport Home from \"../pages/Home\";\nimport TopRated from \"../pages/TopRated\";\nimport Popular from \"../pages/Popular\";\nimport Discover from \"../pages/Discover\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact render={() => <Home />} />\n          <Route path=\"/home\" exact render={() => <Home />} />\n          <Route path=\"/discover\" exact render={() => <Discover />} />\n          <Route path=\"/top-rated\" exact render={() => <TopRated />} />\n          <Route path=\"/popular\" exact render={() => <Popular />} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const ActionTypes = {\n  SET_EMAIL: \"SET_EMAIL\"\n};\n","import { ActionTypes } from \"./actionTypes\";\n\nconst INITIAL_STATE = {};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_EMAIL:\n      return {\n        ...state,\n        email: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}